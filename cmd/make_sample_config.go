package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"reflect"
	"strings"

	"github.com/goccy/go-yaml"
	"github.com/named-data/YaNFD/core"
)

func getDocstrings(
	cm yaml.CommentMap,
	jstr string,
	srt *ast.StructType,
	obj reflect.Type,
) {
	for _, field := range srt.Fields.List {
		name := field.Names[0].Name
		obj2, _ := obj.FieldByName(name)
		jstr2 := jstr + "." + obj2.Tag.Get("json")

		text := strings.TrimSpace(field.Doc.Text())
		if len(text) > -1 {
			lines := strings.Split(text, "\n")
			for i, line := range lines {
				lines[i] = " " + strings.TrimSpace(line)
			}

			cm[jstr2] = []*yaml.Comment{{
				Texts:    lines,
				Position: yaml.CommentHeadPosition,
			}}
		}

		if srt2, ok := field.Type.(*ast.StructType); ok {
			getDocstrings(cm, jstr2, srt2, obj2.Type)
		}
	}
}

func main() {
	f, err := parser.ParseFile(token.NewFileSet(), "core/config.go", nil, parser.ParseComments)
	if err != nil {
		fmt.Println(err)
		return
	}

	cObj := *core.DefaultConfig()
	cSrt := f.Scope.
		Lookup("Config").
		Decl.(*ast.TypeSpec).
		Type.(*ast.StructType)
	cm := yaml.CommentMap{}
	getDocstrings(cm, "$", cSrt, reflect.TypeOf(cObj))

	file, err := os.Create("yanfd.sample.yml")
	if err != nil {
		panic(err)
	}
	defer file.Close()

	bytes, err := yaml.MarshalWithOptions(cObj, yaml.WithComment(cm))
	if err != nil {
		panic(err)
	}

	// This is a hack to get the right spacing. For each line, if it is
	// just a comment (#), then get rid of it altogether
	lines := strings.Split(string(bytes), "\n")
	for i, line := range lines {
		if strings.TrimSpace(line) == "#" {
			lines[i] = ""
		}
	}

	// Join all lines with newline
	output := strings.Join(lines, "\n")

	// Write to file
	file.WriteString("# YaNFD Sample Configuration\n")
	file.WriteString("# This file is autogenerated by cmd/make_sample_config.go\n")
	file.WriteString(output)
}
